name: Node CI

on:
  push:
    branches:
      - master
    tags:
      - v*
    paths:
      - '**'
      - '!**.md' # Exclude Markdown
  pull_request:
    paths:
      - '**'
      - '!**.md' # Exclude Markdown

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      # Setup Environment
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # Cache
      - name: Get npm cache directory
        id: npm-config
        run: echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache Dependencies
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-config.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Clean npm cache directory before Deploy
        if: steps.cache-npm.outputs.cache-hit != 'true' && github.event_name == 'push' && contains(github.event.commits[0].message, 'increment version')
        run: npm cache clear --force

      - name: Install Dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run generate
      - name: Test
        run: npm test

      - name: Report Code Coverage to codecov
        uses: codecov/codecov-action@v1
      - name: Drafts next Release notes
        if: github.event_name == 'push'
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive Production Artifact
        if: contains(github.ref, 'tags/v') # works only version tagged
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy
    needs: [build]
    if: github.event_name == 'push' && contains(github.ref, 'tags/v') # works only version tagged
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Download Production Artifact
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Get Version
        id: get_tag
        run: echo ::set-output name=version::${TAG_REF_NAME##*/}
        env:
          TAG_REF_NAME: ${{ github.ref }}
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: cs.ddradar.app
          commit_message: 'build: release ${{ steps.get_tag.outputs.version }} via '
